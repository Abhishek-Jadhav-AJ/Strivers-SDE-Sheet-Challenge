*/
    Example 1:

Input: 
n = 4, arr1[] = [1 4 8 10] 
m = 5, arr2[] = [2 3 9]

Output: 
arr1[] = [1 2 3 4]
arr2[] = [8 9 10]

Explanation:
After merging the two non-decreasing arrays, we get, 1,2,3,4,8,9,10.

Example2:

Input: 
n = 4, arr1[] = [1 3 5 7] 
m = 5, arr2[] = [0 2 6 8 9]

Output: 
arr1[] = [0 1 2 3]
arr2[] = [5 6 7 8 9]

Explanation:
After merging the two non-decreasing arrays, we get, 0 1 2 3 5 6 7 8 9.
    
*/
#Two Pointer 
void merge(long long arr1[], long long arr2[], int n, int m) {

    //Declare 2 pointers:
    int left = n - 1;
    int right = 0;

    //Swap the elements until arr1[left] is
    // smaller than arr2[right]:
    while (left >= 0 && right < m) {
        if (arr1[left] > arr2[right]) {
            swap(arr1[left], arr2[right]);
            left--, right++;
        }
        else {
            break;
        }
    }

    // Sort arr1[] and arr2[] individually:
    sort(arr1, arr1 + n);
    sort(arr2, arr2 + m);
}


#GAP Method
    void swapGreater(vector<int> nums1,vector<int> nums2, int left ,int right){
        if(nums1[left] > nums2[right]){
            swap(nums1[left] , nums2[right]);
        }
    }
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {

         int len = m + n;

         int gap = (len / 2 ) + (len % 2);

         while(gap > 0){

             int left = 0 ; 
             int right = left+gap;

             while(right < len){
                 if( left < m && right >= n ){
                     swapGreater(nums1,nums2,left,right-m);
                 }else if( left >= m ){
                     swapGreater(nums2 , nums2 , left-m,right-m);
                 }else{
                     swapGreater(nums1,nums1,left,right);
                 }
                 left++,right++;
             } 

             if(gap == 1) break;

             gap = (gap/2) + (gap%2); 

         }
    }

//Brute Force (m*n) Solution

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {

        int m = matrix.size();
        int n = matrix[0].size();

        for(int i = 0 ; i < m ; i++){
            for(int j = 0 ; j < n ; j++){
                if(matrix[i][j] == target){
                    return true;
                    break;
                }
            }
        }

        return false;
        
    }
};

//(m+n) Solution

bool search(vector<vector<int>> &arr, int target)
{
    int m = arr.size(); // 3
    int n = arr[0].size(); // 4 
    int row = 0;
    int col = n - 1;

    while (row < m && col < n)
    {
        int cur = arr[row][col];
        if (cur == target)
            return true;

        if (target > cur)
            row++;
        else
            col--;
    }

    return false;
}

//Binary Search 


    bool searchMatrix(vector<vector<int>>& matrix, int target) {

        int m = matrix.size();
        int n = matrix[0].size();
        int low = 0 ;
        int hi = (m*n) - 1;

        while( low <= hi ){
            int mid = ( low + (hi - low ) / 2 );

            if( matrix[mid/n][mid%n] == target){
                return true;
            }else if(matrix[mid/n][mid%n] < target){
                low = mid + 1; 
            }else{
                hi = mid - 1; 
            }
        }

        return false;
    }

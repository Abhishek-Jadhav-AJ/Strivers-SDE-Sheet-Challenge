/*
Example 1:

Input: intervals=[[1,3],[2,6],[8,10],[15,18]]

Output: [[1,6],[8,10],[15,18]]

Explanation: Since intervals [1,3] and [2,6] are overlapping we can merge them to form [1,6]
 intervals.

Example 2:

Input: [[1,4],[4,5]]

Output: [[1,5]]

Explanation: Since intervals [1,4] and [4,5] are overlapping we can merge them to form [1,5].

*/

class Solution
{
public:
    vector<vector<int>> merge(vector<vector<int>> &interval)
    {
        vector<vector<int>> ans;
        if (interval.size() == 0)
            return ans;
        sort(interval.begin(), interval.end());
        ans.push_back(interval[0]);
        int j = 0;
        for (int i = 1; i < interval.size(); i++)
        {
            if (ans[j][1] >= interval[i][0])
                ans[j][1] = max(ans[j][1], interval[i][1]);
            else
            {
                j++;
                ans.push_back(interval[i]);
            }
        }
        return ans;
    }
};
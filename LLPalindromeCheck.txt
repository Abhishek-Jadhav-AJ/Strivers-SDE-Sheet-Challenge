//Brute Force

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        vector<int> ll;

        ListNode* start = head;
        while(start!=NULL){
            ll.push_back(start->val);
            start = start->next;
        }

        for(int i = 0 ; i < ll.size()/2 ; i++){
            if(ll[i] != ll[ll.size()-i-1]) return false;
        }

        return true;

      
    }
};

//Optimized 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private:
    ListNode* reverse(ListNode* head){
        ListNode* curr = head;
        ListNode* prev =NULL;

        while(curr){
            ListNode* temp = curr->next;
            curr->next = prev;
            prev = curr;
            curr=temp;
        }
        return prev;
    }
public:
    bool isPalindrome(ListNode* head) {
        
    if(head == NULL && head->next == NULL){
        return true;
    }

    ListNode* slow = head;
    ListNode* fast = head;
        
    while(fast->next!=NULL&&fast->next->next!=NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    slow->next = reverse(slow->next);
    slow = slow->next;
    ListNode* dummy = head;

    while(slow != NULL){
        if(slow->val != dummy->val) return false;

        slow = slow->next;
        dummy = dummy->next;
    }

    return true;
      
    }
};
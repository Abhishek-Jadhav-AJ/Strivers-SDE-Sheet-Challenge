

class Solution {
private:
    void func(int ind , vector<int>& nums , vector<int> &ds , vector<vector<int>> &ans){

        ans.push_back(ds);  //Add current subset to the answer vector

        //Generate subsets by including elements starting from the given index

        for(int i = ind ; i < nums.size() ; i++){

            // Skip duplicate elements to avoid generating duplicate subsets

            if( i != ind && nums[i] == nums[i - 1])
                continue ; 
            
            ds.push_back(nums[i]); // Include the current element in the current subset
            func( i + 1 , nums , ds , ans );
            ds.pop_back(); // Remove the current element to backtrack
        }

    }
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {

        sort(nums.begin() , nums.end());
        vector<vector<int>> ans; // vector
        vector<int> ds; // vector to store current subset 
        
        func( 0 , nums , ds , ans);
        return ans ;
        
    }
};
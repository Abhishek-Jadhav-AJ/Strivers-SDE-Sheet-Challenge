
//Apporach 

- pick the one index try all the combination
- for every call reduce the element by target 
- if size is equal to ind return . and if target == 0 then add the elements to the data structure
- calls
    1 . fs(ind , t - arr[ind] , arr , ans , ds);
    2 . fs(ind+1 , t , arr , ans , ds);

class Solution {
public:
    void find(int ind , int t , vector<int>& candiates , vector<vector<int>> &ans , vector<int> &ds){
        if(ind == candiates.size()){
            if(t == 0 ){
                ans.push_back(ds);
            }
            return;
        }
        if(candiates[ind] <= t ){
            ds.push_back(candiates[ind]);
            find(ind , t-candiates[ind] , candiates , ans , ds);
            ds.pop_back();
        }

        find(ind+1 , t , candiates , ans , ds );
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {

        vector<vector<int >> ans;
        vector<int> ds;

        find( 0 ,  target , candidates , ans , ds);
        return ans;
        
    }
};
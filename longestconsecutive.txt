// Brute Force 
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        

        sort(nums.begin() , nums.end());
        int cnt = 1;
        int ans = 1;
        int prev = nums[0];
        int n = nums.size();
        for(int i = 1; i < n ; i++){
            if(nums[i] == prev+1){
                cnt+=1;
            }
            else if(nums[i] != prev+1){
                ans = 1;
            }
            prev = nums[i];
            ans = max(ans , cnt);
        }

        return ans ; 
    }
};


//Optimal using HashSet

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {

        int n = nums.size();
        if(n == 0 ) return 0;
        int ans = 1;
        unordered_set<int> st;

        for(int i = 0 ; i < n ; i++){
            st.insert(nums[i]);
        }

        for(int it: st){
            if(st.find(it - 1) == st.end()){
                int cnt = 1;
                int x = it;

                while(st.find(x+1) != st.end()){
                    x = x + 1;
                    cnt+=1;
                } 

                ans = max(ans , cnt);
            }
        }
        return ans; 
    }
};
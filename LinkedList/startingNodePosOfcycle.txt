/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *cycle(ListNode *head){
        ListNode* slow = head;
        ListNode* fast = fast->next;

        while(slow != NULL && fast!=NULL){
            slow = slow->next;
            fast = fast->next->next;

            if(slow == fast){
                return slow;
            }
        }
        return NULL;
    }
    ListNode *detectCycle(ListNode *head) {

        if(head == NULL && head->next == NULL){
            return NULL;
        }

        ListNode *temp = cycle(head);
        
        if(temp == NULL){
            cout<<"no cycle";
        }else{
            ListNode* curr = head;
            int pos = 0;
            while(curr != temp){
                ++pos;
                curr = curr->next;
            }
        }

        cout<<"Tail connects at pos "<<pos<<endl;
    }
};
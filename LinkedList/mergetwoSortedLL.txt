//Approach 

   1 - we have two nodes pointing to the head
   2 - first we need to create  a dummy LL which will have 
       head and tail to it.
   3 - First we need to get the start node of LL we can get by comparing the value of two LL 
   4 - then assign the head and tail to it and move the pointer of that LL
   5 - Now time to generate the LL while comparing it by remaining nodes
   6 - if LL 1 has less value then join it to the tail make it a new tail and increment the head 
   7 - if the LL still has remaining nodes lastly join it to the tail 
   8 - return the ans head ;

Code :
Node* sortedMerge(Node* head1, Node* head2)  
{  
    if(head1==NULL) return head2;
    if(head2==NULL) return head1;
    
    Node* head;
    Node* tail;
    
    if(head1->data < head2->data){
        head = head1;
        tail = head1;
        head1 = head1->next;
    }else{
        head = head2;
        tail = head2;
        head2 = head2->next;
    }
    while( head1 != NULL && head2 != NULL){
        if(head1->data < head2->data ){
            tail->next = head1;
            tail = head1;
            head1 = head1->next;
            
        }else{
            tail->next = head2;
            tail = head2;
            head2 = head2->next;
        }
        
    }
    if(head1 != NULL){
        tail->next = head1;
    }
    if(head2 != NULL){
        tail->next = head2;
    }
    return head ;  
}  



//Recursive Approach

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {

        if(list1 == NULL) return list2;
        if(list2 == NULL) return list1;

        if(list1->val < list2->val){
            list1->next = mergeTwoLists(list1->next , list2);
            return list1;
        }else{
            list2->next = mergeTwoLists(list1,list2->next);
            return list2;
        }
    }
};
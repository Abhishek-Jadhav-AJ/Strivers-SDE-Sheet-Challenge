
//Possible meeting numbers

 int maxMeetings(int start[], int end[], int n)
    {
        
         vector<pair<int,int>>v;
        for(int i=0;i<n;i++)
        {
            v.push_back({end[i],start[i]});
        }
        sort(v.begin(),v.end());
        int count=1;
        int range=v[0].first;
        for(int i=1;i<n;i++)
        {
            if(range<v[i].second)
            {
                count++;
                range=v[i].first;
            }
        }
        return count;


// organize the meeting in row 


#include <bits/stdc++.h> 
struct meeting {
    int start;
    int end;
    int pos;
};
bool comparator(struct meeting m1 , meeting m2 ){

    if(m1.end < m2.end)
        return true;
    else if(m1.end > m2.end) return false;
    else if(m1.pos < m2.pos ) return true;
    else 
        return false;

}
vector<int> maximumMeetings(vector<int> &s, vector<int> &e) {
    
    
   int n = s.size();
   struct meeting meet[n];

   for(int i = 0 ; i < n ; i++){
       meet[i].start = s[i] , meet[i].end = e[i] , meet[i].pos = i+1;
   }

   sort(meet , meet+n , comparator);
   vector<int > ans;

   int limit = meet[0].end;

   ans.push_back(meet[0].pos);

   for(int i = 0 ; i < n ; i++){
       if(meet[i].start > limit){
           limit = meet[i].end;
           ans.push_back(meet[i].pos);
       }
   }

   for(int i = 0 ; i < ans.size() ; i++){
       cout<<ans[i]<<" ";
   }

}
Find the Majority Element that occurs more than N/2 times
Problem Statement: Given an array of N integers, write a program to return an element that occurs more than N/2 times in the given array. You may consider that such an element always exists in the array.


// Brute Force
class Solution {
public:
    int majorityElement(vector<int>& nums) {

        int n = nums.size();    
        for(int i = 0 ; i < n ; i++){
           int cnt=0;
           for(int j = 0 ; j < n ; j++){
               int num = nums[i];
               if(nums[j] == num){
                   cnt++;
               }
           }
           if(cnt > (n/2)){
               return nums[i];
           }
        }

        return -1;    
    }
};

//Better using map

class Solution {
public:
    int majorityElement(vector<int>& nums) {

        int n = nums.size();    
        map<int,int> mp;

        for(int i = 0 ; i < n ; i++){
            mp[nums[i]]++;
        } 

        for(auto it:mp){
            if(it.second > n/2){
                return it.first;
            }
        }

        return -1;
    }
};

//moore's voting algorithm

class Solution {
public:
    int majorityElement(vector<int>& nums) {

        int n = nums.size();    
        int cnt = 0;
        int el;

        for(int i = 0 ; i < n ; i++){
            if(cnt == 0){
                cnt=1;
                el = nums[i];
            }else if(el == nums[i]){
                cnt++;
            }else{
                cnt--;
            }
        }

        int cnt1=0;
        for(int i = 0 ; i < n ; i++){
            if(el == nums[i]){
                cnt1++;
            }
        }

        if(cnt1 > n/2){
            return el;
        }
        else{
            return -1;
        }
    }
};